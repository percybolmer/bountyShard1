// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package devtoken

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// StakeableStake is an auto generated low-level Go binding around an user-defined struct.
type StakeableStake struct {
	User      common.Address
	Amount    *big.Int
	Since     *big.Int
	Claimable *big.Int
}

// StakeableStakingSummary is an auto generated low-level Go binding around an user-defined struct.
type StakeableStakingSummary struct {
	TotalAmount *big.Int
	Stakes      []StakeableStake
}

// DevtokenMetaData contains all meta data concerning the Devtoken contract.
var DevtokenMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"token_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"short_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"token_decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"token_totalSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"hasStake\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"total_amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"since\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"}],\"internalType\":\"structStakeable.Stake[]\",\"name\":\"stakes\",\"type\":\"tuple[]\"}],\"internalType\":\"structStakeable.StakingSummary\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stake_index\",\"type\":\"uint256\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040526103e86003553480156200001757600080fd5b50604051620035fb380380620035fb83398181016040528101906200003d91906200042b565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3600180816001815401808255809150500390600052602060002090505083600790816200012691906200071c565b5082600690816200013891906200071c565b5081600560006101000a81548160ff021916908360ff16021790555080600481905550600454600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60045460405162000203919062000814565b60405180910390a35050505062000831565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200027e8262000233565b810181811067ffffffffffffffff82111715620002a0576200029f62000244565b5b80604052505050565b6000620002b562000215565b9050620002c3828262000273565b919050565b600067ffffffffffffffff821115620002e657620002e562000244565b5b620002f18262000233565b9050602081019050919050565b60005b838110156200031e57808201518184015260208101905062000301565b838111156200032e576000848401525b50505050565b60006200034b6200034584620002c8565b620002a9565b9050828152602081018484840111156200036a57620003696200022e565b5b62000377848285620002fe565b509392505050565b600082601f83011262000397576200039662000229565b5b8151620003a984826020860162000334565b91505092915050565b600060ff82169050919050565b620003ca81620003b2565b8114620003d657600080fd5b50565b600081519050620003ea81620003bf565b92915050565b6000819050919050565b6200040581620003f0565b81146200041157600080fd5b50565b6000815190506200042581620003fa565b92915050565b600080600080608085870312156200044857620004476200021f565b5b600085015167ffffffffffffffff81111562000469576200046862000224565b5b62000477878288016200037f565b945050602085015167ffffffffffffffff8111156200049b576200049a62000224565b5b620004a9878288016200037f565b9350506040620004bc87828801620003d9565b9250506060620004cf8782880162000414565b91505092959194509250565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200052e57607f821691505b602082108103620005445762000543620004e6565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005ae7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200056f565b620005ba86836200056f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620005fd620005f7620005f184620003f0565b620005d2565b620003f0565b9050919050565b6000819050919050565b6200061983620005dc565b62000631620006288262000604565b8484546200057c565b825550505050565b600090565b6200064862000639565b620006558184846200060e565b505050565b5b818110156200067d57620006716000826200063e565b6001810190506200065b565b5050565b601f821115620006cc5762000696816200054a565b620006a1846200055f565b81016020851015620006b1578190505b620006c9620006c0856200055f565b8301826200065a565b50505b505050565b600082821c905092915050565b6000620006f160001984600802620006d1565b1980831691505092915050565b60006200070c8383620006de565b9150826002028217905092915050565b6200072782620004db565b67ffffffffffffffff81111562000743576200074262000244565b5b6200074f825462000515565b6200075c82828562000681565b600060209050601f8311600181146200079457600084156200077f578287015190505b6200078b8582620006fe565b865550620007fb565b601f198416620007a4866200054a565b60005b82811015620007ce57848901518255600182019150602085019450602081019050620007a7565b86831015620007ee5784890151620007ea601f891682620006de565b8355505b6001600288020188555050505b505050505050565b6200080e81620003f0565b82525050565b60006020820190506200082b600083018462000803565b92915050565b612dba80620008416000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80638da5cb5b116100ad578063a9059cbb11610071578063a9059cbb1461035b578063dd62ed3e1461038b578063e73e14bf146103bb578063f1fdf469146103eb578063f2fde38b146104075761012c565b80638da5cb5b146102a357806395d89b41146102c15780639dc29fac146102df578063a457c2d71461030f578063a694fc3a1461033f5761012c565b806339509351116100f457806339509351146101eb57806340c10f191461021b57806370a082311461024b578063715018a61461027b578063893d20e8146102855761012c565b806306fdde0314610131578063095ea7b31461014f57806318160ddd1461017f57806323b872dd1461019d578063313ce567146101cd575b600080fd5b610139610423565b6040516101469190611f0b565b60405180910390f35b61016960048036038101906101649190611fc6565b6104b5565b6040516101769190612021565b60405180910390f35b6101876104cc565b604051610194919061204b565b60405180910390f35b6101b760048036038101906101b29190612066565b6104d6565b6040516101c49190612021565b60405180910390f35b6101d561063f565b6040516101e291906120d5565b60405180910390f35b61020560048036038101906102009190611fc6565b610656565b6040516102129190612021565b60405180910390f35b61023560048036038101906102309190611fc6565b6106f4565b6040516102429190612021565b60405180910390f35b610265600480360381019061026091906120f0565b610798565b604051610272919061204b565b60405180910390f35b6102836107e1565b005b61028d61092d565b60405161029a919061212c565b60405180910390f35b6102ab61093c565b6040516102b8919061212c565b60405180910390f35b6102c9610965565b6040516102d69190611f0b565b60405180910390f35b6102f960048036038101906102f49190611fc6565b6109f7565b6040516103069190612021565b60405180910390f35b61032960048036038101906103249190611fc6565b610a9b565b6040516103369190612021565b60405180910390f35b61035960048036038101906103549190612147565b610b39565b005b61037560048036038101906103709190611fc6565b610bd0565b6040516103829190612021565b60405180910390f35b6103a560048036038101906103a09190612174565b610be7565b6040516103b2919061204b565b60405180910390f35b6103d560048036038101906103d091906120f0565b610c6e565b6040516103e29190612313565b60405180910390f35b61040560048036038101906104009190612335565b610e7b565b005b610421600480360381019061041c91906120f0565b610e98565b005b606060078054610432906123a4565b80601f016020809104026020016040519081016040528092919081815260200182805461045e906123a4565b80156104ab5780601f10610480576101008083540402835291602001916104ab565b820191906000526020600020905b81548152906001019060200180831161048e57829003601f168201915b5050505050905090565b60006104c2338484610f32565b6001905092915050565b6000600454905090565b600081600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610597576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058e90612447565b60405180910390fd5b6105a28484846110fb565b610634843384600960008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461062f9190612496565b610f32565b600190509392505050565b6000600560009054906101000a900460ff16905090565b60006106ea338484600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546106e591906124ca565b610f32565b6001905092915050565b60003373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610784576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077b90612592565b60405180910390fd5b61078e83836113e1565b6001905092915050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461086f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086690612592565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600061093761093c565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060068054610974906123a4565b80601f01602080910402602001604051908101604052809291908181526020018280546109a0906123a4565b80156109ed5780601f106109c2576101008083540402835291602001916109ed565b820191906000526020600020905b8154815290600101906020018083116109d057829003601f168201915b5050505050905090565b60003373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7e90612592565b60405180910390fd5b610a91838361155c565b6001905092915050565b6000610b2f338484600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b2a9190612496565b610f32565b6001905092915050565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548110610bba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bb190612624565b60405180910390fd5b610bc381611759565b610bcd338261155c565b50565b6000610bdd3384846110fb565b6001905092915050565b6000600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610c76611e58565b6000806040518060400160405280600081526020016001600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481548110610cde57610cdd612644565b5b9060005260206000209060020201600101805480602002602001604051908101604052809291908181526020016000905b82821015610db557838290600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505081526020019060010190610d0f565b50505050815250905060005b816020015151811015610e66576000610df783602001518381518110610dea57610de9612644565b5b602002602001015161193d565b90508083602001518381518110610e1157610e10612644565b5b6020026020010151606001818152505082602001518281518110610e3857610e37612644565b5b60200260200101516020015184610e4f91906124ca565b935050600181610e5f91906124ca565b9050610dc1565b50818160000181815250508092505050919050565b6000610e87838361197f565b9050610e9333826113e1565b505050565b3373ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1d90612592565b60405180910390fd5b610f2f81611c47565b50565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610fa1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f98906126e5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611010576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100790612777565b60405180910390fd5b80600960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516110ee919061204b565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361116a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116190612809565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036111d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d09061289b565b60405180910390fd5b80600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561125b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112529061292d565b60405180910390fd5b80600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112a69190612496565b600860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461133491906124ca565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516113d4919061204b565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611450576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611447906129bf565b60405180910390fd5b8060045461145e91906124ca565b60048190555080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114af91906124ca565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611550919061204b565b60405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c290612a51565b60405180910390fd5b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561164d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164490612ae3565b60405180910390fd5b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116989190612496565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806004546116e99190612496565b600481905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161174d919061204b565b60405180910390a35050565b6000811161179c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179390612b4f565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000429050600082036117f9576117f633611d73565b91505b6001828154811061180d5761180c612644565b5b906000526020600020906002020160010160405180608001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018381526020016000815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010155604082015181600201556060820151816003015550503373ffffffffffffffffffffffffffffffffffffffff167fb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed84848460405161193093929190612b6f565b60405180910390a2505050565b60006003548260200151610e1084604001514261195a9190612496565b6119649190612bd5565b61196e9190612c06565b6119789190612bd5565b9050919050565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600182815481106119da576119d9612644565b5b906000526020600020906002020160010184815481106119fd576119fc612644565b5b90600052602060002090600402016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182015481526020016002820154815260200160038201548152505090508481602001511015611ad3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aca90612cd2565b60405180910390fd5b6000611ade8261193d565b9050858260200151611af09190612496565b8260200181815250506000826020015103611b915760018381548110611b1957611b18612644565b5b90600052602060002090600202016001018581548110611b3c57611b3b612644565b5b9060005260206000209060040201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160009055600282016000905560038201600090555050611c30565b816020015160018481548110611baa57611ba9612644565b5b90600052602060002090600202016001018681548110611bcd57611bcc612644565b5b9060005260206000209060040201600101819055504260018481548110611bf757611bf6612644565b5b90600052602060002090600202016001018681548110611c1a57611c19612644565b5b9060005260206000209060040201600201819055505b8086611c3c91906124ca565b935050505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611cb6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cad90612d64565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006001808160018154018082558091505003906000526020600020905050600060018080549050611da59190612496565b90508260018281548110611dbc57611dbb612644565b5b906000526020600020906002020160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080915050919050565b604051806040016040528060008152602001606081525090565b600081519050919050565b600082825260208201905092915050565b60005b83811015611eac578082015181840152602081019050611e91565b83811115611ebb576000848401525b50505050565b6000601f19601f8301169050919050565b6000611edd82611e72565b611ee78185611e7d565b9350611ef7818560208601611e8e565b611f0081611ec1565b840191505092915050565b60006020820190508181036000830152611f258184611ed2565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f5d82611f32565b9050919050565b611f6d81611f52565b8114611f7857600080fd5b50565b600081359050611f8a81611f64565b92915050565b6000819050919050565b611fa381611f90565b8114611fae57600080fd5b50565b600081359050611fc081611f9a565b92915050565b60008060408385031215611fdd57611fdc611f2d565b5b6000611feb85828601611f7b565b9250506020611ffc85828601611fb1565b9150509250929050565b60008115159050919050565b61201b81612006565b82525050565b60006020820190506120366000830184612012565b92915050565b61204581611f90565b82525050565b6000602082019050612060600083018461203c565b92915050565b60008060006060848603121561207f5761207e611f2d565b5b600061208d86828701611f7b565b935050602061209e86828701611f7b565b92505060406120af86828701611fb1565b9150509250925092565b600060ff82169050919050565b6120cf816120b9565b82525050565b60006020820190506120ea60008301846120c6565b92915050565b60006020828403121561210657612105611f2d565b5b600061211484828501611f7b565b91505092915050565b61212681611f52565b82525050565b6000602082019050612141600083018461211d565b92915050565b60006020828403121561215d5761215c611f2d565b5b600061216b84828501611fb1565b91505092915050565b6000806040838503121561218b5761218a611f2d565b5b600061219985828601611f7b565b92505060206121aa85828601611f7b565b9150509250929050565b6121bd81611f90565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6121f881611f52565b82525050565b60808201600082015161221460008501826121ef565b50602082015161222760208501826121b4565b50604082015161223a60408501826121b4565b50606082015161224d60608501826121b4565b50505050565b600061225f83836121fe565b60808301905092915050565b6000602082019050919050565b6000612283826121c3565b61228d81856121ce565b9350612298836121df565b8060005b838110156122c95781516122b08882612253565b97506122bb8361226b565b92505060018101905061229c565b5085935050505092915050565b60006040830160008301516122ee60008601826121b4565b50602083015184820360208601526123068282612278565b9150508091505092915050565b6000602082019050818103600083015261232d81846122d6565b905092915050565b6000806040838503121561234c5761234b611f2d565b5b600061235a85828601611fb1565b925050602061236b85828601611fb1565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806123bc57607f821691505b6020821081036123cf576123ce612375565b5b50919050565b7f446576546f6b656e3a20596f752063616e6e6f74207370656e6420746861742060008201527f6d756368206f6e2074686973206163636f756e74000000000000000000000000602082015250565b6000612431603483611e7d565b915061243c826123d5565b604082019050919050565b6000602082019050818103600083015261246081612424565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006124a182611f90565b91506124ac83611f90565b9250828210156124bf576124be612467565b5b828203905092915050565b60006124d582611f90565b91506124e083611f90565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561251557612514612467565b5b828201905092915050565b7f4f776e61626c653a206f6e6c79206f776e65722063616e2063616c6c2074686960008201527f732066756e6374696f6e00000000000000000000000000000000000000000000602082015250565b600061257c602a83611e7d565b915061258782612520565b604082019050919050565b600060208201905081810360008301526125ab8161256f565b9050919050565b7f446576546f6b656e3a2043616e6e6f74207374616b65206d6f7265207468616e60008201527f20796f75206f776e000000000000000000000000000000000000000000000000602082015250565b600061260e602883611e7d565b9150612619826125b2565b604082019050919050565b6000602082019050818103600083015261263d81612601565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f446576546f6b656e3a20617070726f76652063616e6e6f7420626520646f6e6560008201527f2066726f6d207a65726f20616464726573730000000000000000000000000000602082015250565b60006126cf603283611e7d565b91506126da82612673565b604082019050919050565b600060208201905081810360008301526126fe816126c2565b9050919050565b7f446576546f6b656e3a20617070726f76652063616e6e6f7420626520746f207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b6000612761602b83611e7d565b915061276c82612705565b604082019050919050565b6000602082019050818103600083015261279081612754565b9050919050565b7f446576546f6b656e3a207472616e736665722066726f6d207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006127f3602483611e7d565b91506127fe82612797565b604082019050919050565b60006020820190508181036000830152612822816127e6565b9050919050565b7f446576546f6b656e3a207472616e7366657220746f207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000612885602283611e7d565b915061289082612829565b604082019050919050565b600060208201905081810360008301526128b481612878565b9050919050565b7f446576546f6b656e3a2063616e74207472616e73666572206d6f72652074686160008201527f6e20796f7572206163636f756e7420686f6c6473000000000000000000000000602082015250565b6000612917603483611e7d565b9150612922826128bb565b604082019050919050565b600060208201905081810360008301526129468161290a565b9050919050565b7f446576546f6b656e3a2063616e6e6f74206d696e7420746f207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006129a9602583611e7d565b91506129b48261294d565b604082019050919050565b600060208201905081810360008301526129d88161299c565b9050919050565b7f446576546f6b656e3a2063616e6e6f74206275726e2066726f6d207a65726f2060008201527f6164647265737300000000000000000000000000000000000000000000000000602082015250565b6000612a3b602783611e7d565b9150612a46826129df565b604082019050919050565b60006020820190508181036000830152612a6a81612a2e565b9050919050565b7f446576546f6b656e3a2043616e6e6f74206275726e206d6f7265207468616e2060008201527f746865206163636f756e74206f776e7300000000000000000000000000000000602082015250565b6000612acd603083611e7d565b9150612ad882612a71565b604082019050919050565b60006020820190508181036000830152612afc81612ac0565b9050919050565b7f43616e6e6f74207374616b65206e6f7468696e67000000000000000000000000600082015250565b6000612b39601483611e7d565b9150612b4482612b03565b602082019050919050565b60006020820190508181036000830152612b6881612b2c565b9050919050565b6000606082019050612b84600083018661203c565b612b91602083018561203c565b612b9e604083018461203c565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612be082611f90565b9150612beb83611f90565b925082612bfb57612bfa612ba6565b5b828204905092915050565b6000612c1182611f90565b9150612c1c83611f90565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612c5557612c54612467565b5b828202905092915050565b7f5374616b696e673a2043616e6e6f74207769746864726177206d6f726520746860008201527f616e20796f752068617665207374616b65640000000000000000000000000000602082015250565b6000612cbc603283611e7d565b9150612cc782612c60565b604082019050919050565b60006020820190508181036000830152612ceb81612caf565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612d4e602683611e7d565b9150612d5982612cf2565b604082019050919050565b60006020820190508181036000830152612d7d81612d41565b905091905056fea2646970667358221220af21bd2f71cb0d755a38f04d39a3a8592b18522af769475d790e90daf9f574de64736f6c634300080f0033",
}

// DevtokenABI is the input ABI used to generate the binding from.
// Deprecated: Use DevtokenMetaData.ABI instead.
var DevtokenABI = DevtokenMetaData.ABI

// DevtokenBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use DevtokenMetaData.Bin instead.
var DevtokenBin = DevtokenMetaData.Bin

// DeployDevtoken deploys a new Ethereum contract, binding an instance of Devtoken to it.
func DeployDevtoken(auth *bind.TransactOpts, backend bind.ContractBackend, token_name string, short_symbol string, token_decimals uint8, token_totalSupply *big.Int) (common.Address, *types.Transaction, *Devtoken, error) {
	parsed, err := DevtokenMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(DevtokenBin), backend, token_name, short_symbol, token_decimals, token_totalSupply)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Devtoken{DevtokenCaller: DevtokenCaller{contract: contract}, DevtokenTransactor: DevtokenTransactor{contract: contract}, DevtokenFilterer: DevtokenFilterer{contract: contract}}, nil
}

// Devtoken is an auto generated Go binding around an Ethereum contract.
type Devtoken struct {
	DevtokenCaller     // Read-only binding to the contract
	DevtokenTransactor // Write-only binding to the contract
	DevtokenFilterer   // Log filterer for contract events
}

// DevtokenCaller is an auto generated read-only Go binding around an Ethereum contract.
type DevtokenCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DevtokenTransactor is an auto generated write-only Go binding around an Ethereum contract.
type DevtokenTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DevtokenFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type DevtokenFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// DevtokenSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type DevtokenSession struct {
	Contract     *Devtoken         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// DevtokenCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type DevtokenCallerSession struct {
	Contract *DevtokenCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// DevtokenTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type DevtokenTransactorSession struct {
	Contract     *DevtokenTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// DevtokenRaw is an auto generated low-level Go binding around an Ethereum contract.
type DevtokenRaw struct {
	Contract *Devtoken // Generic contract binding to access the raw methods on
}

// DevtokenCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type DevtokenCallerRaw struct {
	Contract *DevtokenCaller // Generic read-only contract binding to access the raw methods on
}

// DevtokenTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type DevtokenTransactorRaw struct {
	Contract *DevtokenTransactor // Generic write-only contract binding to access the raw methods on
}

// NewDevtoken creates a new instance of Devtoken, bound to a specific deployed contract.
func NewDevtoken(address common.Address, backend bind.ContractBackend) (*Devtoken, error) {
	contract, err := bindDevtoken(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Devtoken{DevtokenCaller: DevtokenCaller{contract: contract}, DevtokenTransactor: DevtokenTransactor{contract: contract}, DevtokenFilterer: DevtokenFilterer{contract: contract}}, nil
}

// NewDevtokenCaller creates a new read-only instance of Devtoken, bound to a specific deployed contract.
func NewDevtokenCaller(address common.Address, caller bind.ContractCaller) (*DevtokenCaller, error) {
	contract, err := bindDevtoken(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &DevtokenCaller{contract: contract}, nil
}

// NewDevtokenTransactor creates a new write-only instance of Devtoken, bound to a specific deployed contract.
func NewDevtokenTransactor(address common.Address, transactor bind.ContractTransactor) (*DevtokenTransactor, error) {
	contract, err := bindDevtoken(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &DevtokenTransactor{contract: contract}, nil
}

// NewDevtokenFilterer creates a new log filterer instance of Devtoken, bound to a specific deployed contract.
func NewDevtokenFilterer(address common.Address, filterer bind.ContractFilterer) (*DevtokenFilterer, error) {
	contract, err := bindDevtoken(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &DevtokenFilterer{contract: contract}, nil
}

// bindDevtoken binds a generic wrapper to an already deployed contract.
func bindDevtoken(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(DevtokenABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Devtoken *DevtokenRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Devtoken.Contract.DevtokenCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Devtoken *DevtokenRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Devtoken.Contract.DevtokenTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Devtoken *DevtokenRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Devtoken.Contract.DevtokenTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Devtoken *DevtokenCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Devtoken.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Devtoken *DevtokenTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Devtoken.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Devtoken *DevtokenTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Devtoken.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Devtoken *DevtokenCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Devtoken.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Devtoken *DevtokenSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Devtoken.Contract.Allowance(&_Devtoken.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Devtoken *DevtokenCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Devtoken.Contract.Allowance(&_Devtoken.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Devtoken *DevtokenCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Devtoken.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Devtoken *DevtokenSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Devtoken.Contract.BalanceOf(&_Devtoken.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Devtoken *DevtokenCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Devtoken.Contract.BalanceOf(&_Devtoken.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Devtoken *DevtokenCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Devtoken.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Devtoken *DevtokenSession) Decimals() (uint8, error) {
	return _Devtoken.Contract.Decimals(&_Devtoken.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Devtoken *DevtokenCallerSession) Decimals() (uint8, error) {
	return _Devtoken.Contract.Decimals(&_Devtoken.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_Devtoken *DevtokenCaller) GetOwner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Devtoken.contract.Call(opts, &out, "getOwner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_Devtoken *DevtokenSession) GetOwner() (common.Address, error) {
	return _Devtoken.Contract.GetOwner(&_Devtoken.CallOpts)
}

// GetOwner is a free data retrieval call binding the contract method 0x893d20e8.
//
// Solidity: function getOwner() view returns(address)
func (_Devtoken *DevtokenCallerSession) GetOwner() (common.Address, error) {
	return _Devtoken.Contract.GetOwner(&_Devtoken.CallOpts)
}

// HasStake is a free data retrieval call binding the contract method 0xe73e14bf.
//
// Solidity: function hasStake(address _staker) view returns((uint256,(address,uint256,uint256,uint256)[]))
func (_Devtoken *DevtokenCaller) HasStake(opts *bind.CallOpts, _staker common.Address) (StakeableStakingSummary, error) {
	var out []interface{}
	err := _Devtoken.contract.Call(opts, &out, "hasStake", _staker)

	if err != nil {
		return *new(StakeableStakingSummary), err
	}

	out0 := *abi.ConvertType(out[0], new(StakeableStakingSummary)).(*StakeableStakingSummary)

	return out0, err

}

// HasStake is a free data retrieval call binding the contract method 0xe73e14bf.
//
// Solidity: function hasStake(address _staker) view returns((uint256,(address,uint256,uint256,uint256)[]))
func (_Devtoken *DevtokenSession) HasStake(_staker common.Address) (StakeableStakingSummary, error) {
	return _Devtoken.Contract.HasStake(&_Devtoken.CallOpts, _staker)
}

// HasStake is a free data retrieval call binding the contract method 0xe73e14bf.
//
// Solidity: function hasStake(address _staker) view returns((uint256,(address,uint256,uint256,uint256)[]))
func (_Devtoken *DevtokenCallerSession) HasStake(_staker common.Address) (StakeableStakingSummary, error) {
	return _Devtoken.Contract.HasStake(&_Devtoken.CallOpts, _staker)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Devtoken *DevtokenCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Devtoken.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Devtoken *DevtokenSession) Name() (string, error) {
	return _Devtoken.Contract.Name(&_Devtoken.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Devtoken *DevtokenCallerSession) Name() (string, error) {
	return _Devtoken.Contract.Name(&_Devtoken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Devtoken *DevtokenCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Devtoken.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Devtoken *DevtokenSession) Owner() (common.Address, error) {
	return _Devtoken.Contract.Owner(&_Devtoken.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Devtoken *DevtokenCallerSession) Owner() (common.Address, error) {
	return _Devtoken.Contract.Owner(&_Devtoken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Devtoken *DevtokenCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Devtoken.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Devtoken *DevtokenSession) Symbol() (string, error) {
	return _Devtoken.Contract.Symbol(&_Devtoken.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Devtoken *DevtokenCallerSession) Symbol() (string, error) {
	return _Devtoken.Contract.Symbol(&_Devtoken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Devtoken *DevtokenCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Devtoken.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Devtoken *DevtokenSession) TotalSupply() (*big.Int, error) {
	return _Devtoken.Contract.TotalSupply(&_Devtoken.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Devtoken *DevtokenCallerSession) TotalSupply() (*big.Int, error) {
	return _Devtoken.Contract.TotalSupply(&_Devtoken.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Devtoken *DevtokenTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Devtoken.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Devtoken *DevtokenSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Devtoken.Contract.Approve(&_Devtoken.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Devtoken *DevtokenTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Devtoken.Contract.Approve(&_Devtoken.TransactOpts, spender, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address account, uint256 amount) returns(bool)
func (_Devtoken *DevtokenTransactor) Burn(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Devtoken.contract.Transact(opts, "burn", account, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address account, uint256 amount) returns(bool)
func (_Devtoken *DevtokenSession) Burn(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Devtoken.Contract.Burn(&_Devtoken.TransactOpts, account, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x9dc29fac.
//
// Solidity: function burn(address account, uint256 amount) returns(bool)
func (_Devtoken *DevtokenTransactorSession) Burn(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Devtoken.Contract.Burn(&_Devtoken.TransactOpts, account, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 amount) returns(bool)
func (_Devtoken *DevtokenTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Devtoken.contract.Transact(opts, "decreaseAllowance", spender, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 amount) returns(bool)
func (_Devtoken *DevtokenSession) DecreaseAllowance(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Devtoken.Contract.DecreaseAllowance(&_Devtoken.TransactOpts, spender, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 amount) returns(bool)
func (_Devtoken *DevtokenTransactorSession) DecreaseAllowance(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Devtoken.Contract.DecreaseAllowance(&_Devtoken.TransactOpts, spender, amount)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 amount) returns(bool)
func (_Devtoken *DevtokenTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Devtoken.contract.Transact(opts, "increaseAllowance", spender, amount)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 amount) returns(bool)
func (_Devtoken *DevtokenSession) IncreaseAllowance(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Devtoken.Contract.IncreaseAllowance(&_Devtoken.TransactOpts, spender, amount)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 amount) returns(bool)
func (_Devtoken *DevtokenTransactorSession) IncreaseAllowance(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Devtoken.Contract.IncreaseAllowance(&_Devtoken.TransactOpts, spender, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address account, uint256 amount) returns(bool)
func (_Devtoken *DevtokenTransactor) Mint(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Devtoken.contract.Transact(opts, "mint", account, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address account, uint256 amount) returns(bool)
func (_Devtoken *DevtokenSession) Mint(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Devtoken.Contract.Mint(&_Devtoken.TransactOpts, account, amount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address account, uint256 amount) returns(bool)
func (_Devtoken *DevtokenTransactorSession) Mint(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Devtoken.Contract.Mint(&_Devtoken.TransactOpts, account, amount)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Devtoken *DevtokenTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Devtoken.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Devtoken *DevtokenSession) RenounceOwnership() (*types.Transaction, error) {
	return _Devtoken.Contract.RenounceOwnership(&_Devtoken.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Devtoken *DevtokenTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Devtoken.Contract.RenounceOwnership(&_Devtoken.TransactOpts)
}

// Stake is a paid mutator transaction binding the contract method 0xa694fc3a.
//
// Solidity: function stake(uint256 _amount) returns()
func (_Devtoken *DevtokenTransactor) Stake(opts *bind.TransactOpts, _amount *big.Int) (*types.Transaction, error) {
	return _Devtoken.contract.Transact(opts, "stake", _amount)
}

// Stake is a paid mutator transaction binding the contract method 0xa694fc3a.
//
// Solidity: function stake(uint256 _amount) returns()
func (_Devtoken *DevtokenSession) Stake(_amount *big.Int) (*types.Transaction, error) {
	return _Devtoken.Contract.Stake(&_Devtoken.TransactOpts, _amount)
}

// Stake is a paid mutator transaction binding the contract method 0xa694fc3a.
//
// Solidity: function stake(uint256 _amount) returns()
func (_Devtoken *DevtokenTransactorSession) Stake(_amount *big.Int) (*types.Transaction, error) {
	return _Devtoken.Contract.Stake(&_Devtoken.TransactOpts, _amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_Devtoken *DevtokenTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Devtoken.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_Devtoken *DevtokenSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Devtoken.Contract.Transfer(&_Devtoken.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_Devtoken *DevtokenTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Devtoken.Contract.Transfer(&_Devtoken.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address spender, address recipient, uint256 amount) returns(bool)
func (_Devtoken *DevtokenTransactor) TransferFrom(opts *bind.TransactOpts, spender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Devtoken.contract.Transact(opts, "transferFrom", spender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address spender, address recipient, uint256 amount) returns(bool)
func (_Devtoken *DevtokenSession) TransferFrom(spender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Devtoken.Contract.TransferFrom(&_Devtoken.TransactOpts, spender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address spender, address recipient, uint256 amount) returns(bool)
func (_Devtoken *DevtokenTransactorSession) TransferFrom(spender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Devtoken.Contract.TransferFrom(&_Devtoken.TransactOpts, spender, recipient, amount)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Devtoken *DevtokenTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Devtoken.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Devtoken *DevtokenSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Devtoken.Contract.TransferOwnership(&_Devtoken.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Devtoken *DevtokenTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Devtoken.Contract.TransferOwnership(&_Devtoken.TransactOpts, newOwner)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0xf1fdf469.
//
// Solidity: function withdrawStake(uint256 amount, uint256 stake_index) returns()
func (_Devtoken *DevtokenTransactor) WithdrawStake(opts *bind.TransactOpts, amount *big.Int, stake_index *big.Int) (*types.Transaction, error) {
	return _Devtoken.contract.Transact(opts, "withdrawStake", amount, stake_index)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0xf1fdf469.
//
// Solidity: function withdrawStake(uint256 amount, uint256 stake_index) returns()
func (_Devtoken *DevtokenSession) WithdrawStake(amount *big.Int, stake_index *big.Int) (*types.Transaction, error) {
	return _Devtoken.Contract.WithdrawStake(&_Devtoken.TransactOpts, amount, stake_index)
}

// WithdrawStake is a paid mutator transaction binding the contract method 0xf1fdf469.
//
// Solidity: function withdrawStake(uint256 amount, uint256 stake_index) returns()
func (_Devtoken *DevtokenTransactorSession) WithdrawStake(amount *big.Int, stake_index *big.Int) (*types.Transaction, error) {
	return _Devtoken.Contract.WithdrawStake(&_Devtoken.TransactOpts, amount, stake_index)
}

// DevtokenApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Devtoken contract.
type DevtokenApprovalIterator struct {
	Event *DevtokenApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DevtokenApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DevtokenApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DevtokenApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DevtokenApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DevtokenApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DevtokenApproval represents a Approval event raised by the Devtoken contract.
type DevtokenApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Devtoken *DevtokenFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*DevtokenApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Devtoken.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &DevtokenApprovalIterator{contract: _Devtoken.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Devtoken *DevtokenFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *DevtokenApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Devtoken.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DevtokenApproval)
				if err := _Devtoken.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Devtoken *DevtokenFilterer) ParseApproval(log types.Log) (*DevtokenApproval, error) {
	event := new(DevtokenApproval)
	if err := _Devtoken.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DevtokenOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Devtoken contract.
type DevtokenOwnershipTransferredIterator struct {
	Event *DevtokenOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DevtokenOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DevtokenOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DevtokenOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DevtokenOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DevtokenOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DevtokenOwnershipTransferred represents a OwnershipTransferred event raised by the Devtoken contract.
type DevtokenOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Devtoken *DevtokenFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*DevtokenOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Devtoken.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &DevtokenOwnershipTransferredIterator{contract: _Devtoken.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Devtoken *DevtokenFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *DevtokenOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Devtoken.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DevtokenOwnershipTransferred)
				if err := _Devtoken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Devtoken *DevtokenFilterer) ParseOwnershipTransferred(log types.Log) (*DevtokenOwnershipTransferred, error) {
	event := new(DevtokenOwnershipTransferred)
	if err := _Devtoken.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DevtokenStakedIterator is returned from FilterStaked and is used to iterate over the raw logs and unpacked data for Staked events raised by the Devtoken contract.
type DevtokenStakedIterator struct {
	Event *DevtokenStaked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DevtokenStakedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DevtokenStaked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DevtokenStaked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DevtokenStakedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DevtokenStakedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DevtokenStaked represents a Staked event raised by the Devtoken contract.
type DevtokenStaked struct {
	User      common.Address
	Amount    *big.Int
	Index     *big.Int
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterStaked is a free log retrieval operation binding the contract event 0xb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed.
//
// Solidity: event Staked(address indexed user, uint256 amount, uint256 index, uint256 timestamp)
func (_Devtoken *DevtokenFilterer) FilterStaked(opts *bind.FilterOpts, user []common.Address) (*DevtokenStakedIterator, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Devtoken.contract.FilterLogs(opts, "Staked", userRule)
	if err != nil {
		return nil, err
	}
	return &DevtokenStakedIterator{contract: _Devtoken.contract, event: "Staked", logs: logs, sub: sub}, nil
}

// WatchStaked is a free log subscription operation binding the contract event 0xb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed.
//
// Solidity: event Staked(address indexed user, uint256 amount, uint256 index, uint256 timestamp)
func (_Devtoken *DevtokenFilterer) WatchStaked(opts *bind.WatchOpts, sink chan<- *DevtokenStaked, user []common.Address) (event.Subscription, error) {

	var userRule []interface{}
	for _, userItem := range user {
		userRule = append(userRule, userItem)
	}

	logs, sub, err := _Devtoken.contract.WatchLogs(opts, "Staked", userRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DevtokenStaked)
				if err := _Devtoken.contract.UnpackLog(event, "Staked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStaked is a log parse operation binding the contract event 0xb4caaf29adda3eefee3ad552a8e85058589bf834c7466cae4ee58787f70589ed.
//
// Solidity: event Staked(address indexed user, uint256 amount, uint256 index, uint256 timestamp)
func (_Devtoken *DevtokenFilterer) ParseStaked(log types.Log) (*DevtokenStaked, error) {
	event := new(DevtokenStaked)
	if err := _Devtoken.contract.UnpackLog(event, "Staked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// DevtokenTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Devtoken contract.
type DevtokenTransferIterator struct {
	Event *DevtokenTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *DevtokenTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(DevtokenTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(DevtokenTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *DevtokenTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *DevtokenTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// DevtokenTransfer represents a Transfer event raised by the Devtoken contract.
type DevtokenTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Devtoken *DevtokenFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*DevtokenTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Devtoken.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &DevtokenTransferIterator{contract: _Devtoken.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Devtoken *DevtokenFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *DevtokenTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Devtoken.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(DevtokenTransfer)
				if err := _Devtoken.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Devtoken *DevtokenFilterer) ParseTransfer(log types.Log) (*DevtokenTransfer, error) {
	event := new(DevtokenTransfer)
	if err := _Devtoken.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
